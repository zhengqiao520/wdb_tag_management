using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;

using Phychips.Helper;
using Phychips.Rcp;

namespace Phychips.PR9200
{
    class ScriptParser
    {
        string WholeScript = "";

        public ScriptParser(string ws)
        {
            this.WholeScript = ws;
        }

        public void ParseScript()
        {
            try
            {
                    if (this.WholeScript != "")
                    {                        
                        string s = this.WholeScript.Trim();
                        s = s.Replace(" ","");

                        string[] ss;
                        ss = s.Split(new char[] { ',', ' ' });

                        RCPBuilder valClass = (RCPBuilder)ScriptToRCP.ht[ss[0]];

                        try
                        {
                            if (ss.Length == 1)
                            {
                                RcpProtocol.Instance.SendBytePkt(valClass.CmdToRCP());
                            }
                            else if (ss.Length == 2)
                            {
                                try
                                {
                                    RcpProtocol.Instance.SendBytePkt(valClass.CmdToRCP(Convert.ToUInt16(ss[1])));
                                }
                                catch (GetSleepException)
                                {
                                    Thread.Sleep(UInt16.Parse(ss[1]));
                                }
                                // If the ss[1] is not a number, FormatException will be generated by above method
                            }
                            else
                            {
                                throw new FormatException();
                            }
                        }
                        catch (FormatException)
                        {
                            StringBuilder sb = new StringBuilder();
                            for (int j = 1; j < ss.Length; j++)
                            {
                                sb.Append(ss[j] + ",");
                            }
                            try
                            {
                                RcpProtocol.Instance.SendBytePkt(valClass.CmdToRCP(sb.ToString()));
                            }
                            catch (NotImplementedException)
                            {
                                MessageBox.Show("Syntax Error",
                                                "Error",
                                                MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                            }
                        }
                        catch (GetSleepException)
                        {
                            Thread.Sleep(UInt16.Parse(ss[1]));
                        }
                        catch
                        {
                            MessageBox.Show("Syntax Error",
                                            "Error",
                                            MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                        }
                    }
            }
            catch
            {    
            }
        }
    }
}
